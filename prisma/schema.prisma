generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  COORDINATOR
  USER
  REAP
}

model User {
  id          String    @id @default(uuid())
  clerkId     String    @unique
  name        String?
  email       String?   @unique
  phone       String?
  image       String?
  address     String?
  collegeName String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  events      Event[]   @relation("EventCoordinator")
  teams       Team[]    @relation("TeamMembers")
  team        Team[]
  booking     Booking[]
}

enum EventStage {
  ONSTAGE
  OFFSTAGE
}

enum EventCategory {
  DANCE
  MUSIC
  DRAMA
  LITERARY
  INFORMALS
  ART
  SPORTS
  PHOTORAPHY
}

enum EventDay {
  DAY1
  DAY2
}

model Event {
  id       String        @id @default(uuid())
  title    String
  rules    String[]
  category EventCategory

  stage     EventStage @default(OFFSTAGE)
  day       EventDay   @default(DAY1)
  date      DateTime
  poster    String
  groupSize String
  slotCount String
  archived  Boolean    @default(false)

  price          String
  pricePerPerson Boolean @default(false)

  coordinators User[]    @relation("EventCoordinator")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]
}

model Team {
  id          String  @id @default(uuid())
  reap        User    @relation(fields: [reapId], references: [id])
  reapId      String
  teamId      String  @unique
  name        String
  groupSize   String
  collegeOnly Boolean @default(false)
  members     User[]  @relation("TeamMembers")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking[]
}

enum BokingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id                String       @id @default(uuid())
  leader            User         @relation(fields: [userId], references: [id])
  userId            String
  event             Event        @relation(fields: [eventId], references: [id])
  eventId           String
  price             String
  team              Team         @relation(fields: [teamId], references: [id])
  teamId            String
  paymentScreenshot String?
  isPaid            Boolean      @default(false)
  status            BokingStatus @default(PENDING)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  ticket            Ticket[]
}

enum TicketStatus {
  CONFIRMED
  CHECKEDIN
  CANCELLED
  EXPIRED
}

model Ticket {
  id         String       @id @default(uuid())
  booking    Booking      @relation(fields: [bookingId], references: [id])
  bookingId  String
  status     TicketStatus @default(CONFIRMED)
  secretCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
