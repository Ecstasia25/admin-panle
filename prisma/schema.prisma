generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  COORDINATOR
  USER
}

model User {
  id          String    @id @default(uuid())
  clerkId     String    @unique
  name        String?
  email       String?   @unique
  phone       String?
  image       String?
  address     String?
  collegeName String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  events      Event[]   @relation("EventCoordinator")
  booking     Booking[] @relation("BookingMembers")
}

model FcmTokens {
  id        String   @id @default(uuid())
  token     String
  userId    String
  userName  String
  deviceOs String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}





enum EventStage {
  ONSTAGE
  OFFSTAGE
}

enum EventCategory {
  DANCE
  MUSIC
  DRAMA
  LITERARY
  INFORMALS
  ART
  SPORTS
  PHOTORAPHY
}

enum EventDay {
  DAY1
  DAY2
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String
  category    EventCategory

  stage     EventStage @default(OFFSTAGE)
  day       EventDay   @default(DAY1)
  date      DateTime
  poster    String
  groupSize String
  slotCount String
  archived  Boolean    @default(false)

  price      String
  discount   String?
  finalPrice String?

  coordinators User[]    @relation("EventCoordinator")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  Ticket       Ticket[]
}

enum BookingStatus {
  ONHOLD
  PROCESSING
  CONFIRMED
  CANCELED
  EXPIRED
}

enum PaymentType {
  MONEY
  CENTRAL
}

model Booking {
  id          String      @id @default(uuid())
  eventId     String
  price       String
  paymentType PaymentType @default(MONEY)

  leaderId     String
  leaderName   String
  leaderNumber String
  leaderAdress String

  groupSize String

  members User[] @relation("BookingMembers")
  event   Event  @relation(fields: [eventId], references: [id])

  status    BookingStatus @default(ONHOLD)
  isPaid    Boolean       @default(false)
  pymentId  String?
  sessionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]

  @@unique([id])
}

model Ticket {
  id String @id @default(uuid())

  totalEntry String
  baseImage  String
  secretCode String
  bookingId  String
  eventId    String

  booking Booking @relation(fields: [bookingId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
